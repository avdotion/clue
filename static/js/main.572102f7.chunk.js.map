{"version":3,"sources":["components/app-header/index.js","components/app-header/AppHeader.js","components/app-header/app-title/index.js","components/app-header/app-title/AppTitle.js","components/master-password/index.js","components/master-password/MasterPassword.js","components/domain-name/index.js","components/domain-name/DomainName.js","components/optional-domain-phrase/index.js","components/optional-domain-phrase/OptionalDomainPhrase.js","components/salted-password/index.js","components/salted-password/SaltedPassword.js","components/app-header/hash-type/index.js","components/app-header/hash-type/HashType.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","props","react_default","a","createElement","className","children","AppTitle","class","title","MasterPassword","for","type","id","onChange","isAutoCopyHandler","checked","isAutoCopy","tabIndex","masterPasswordHandler","autoFocus","style","backgroundColor","str","masterPassword","length","concat","hash","i","charCodeAt","hashCode","DomainName","forceLowerCase","forceLowerCaseHandler","domainNameHandler","value","domainName","OptionalDomainPhrase","optionalDomainPhraseHandler","optionalDomainPhrase","SaltedPassword","selectSaltedPassword","selectable","document","getElementById","window","getSelection","selectAllChildren","onClick","min","max","saltedPasswordLength","saltedPasswordLengthHandler","saltedPassword","HashType","hashFunctionName","hashTypeHandler","hashFunctionsList","map","hashName","key","toUpperCase","CRYPTO_ALGORITHMS","name","f","CryptoES","MD5","SHA1","SHA512","SHA3","RIPEMD160","hashFunction","message","toString","enc","Base64","replace","slice","hashWrapper","DEFAUT_HASH_FUNCTION","App","state","saltPasswordLength","generateSaltedPassword","cryptoMethod","_this$state","_this","_this$state2","cryptoAlgorithm","reduce","accumulator","currentHashFunction","toLowerCase","handleInput","field","event","newObject","target","setState","handleCheckbox","render","_this$state3","navigator","clipboard","writeText","app_header","app_title","hash_type","master_password","domain_name","optional_domain_phrase","salted_password","React","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.572102f7.chunk.js","sourcesContent":["import AppHeader from './AppHeader';\n\nexport default AppHeader;\n","import React from 'react';\nimport './AppHeader.scss';\n\nconst AppHeader = props => {\n  return (\n    <div className=\"app-header\">\n      { props.children }\n    </div>\n  );\n};\n\nexport default AppHeader;","import AppTitle from './AppTitle';\n\nexport default AppTitle;\n","import React from 'react';\nimport './AppTitle.scss';\n\nconst AppTitle = props => {\n  return (\n    <div className=\"app-title\">\n      <i class=\"emoji lock\" />\n      <h1>{ props.title }</h1>\n    </div>\n  );\n};\n\nexport default AppTitle;\n","import MasterPassword from './MasterPassword';\n\nexport default MasterPassword;\n","import React from 'react';\nimport './MasterPassword.scss';\n\nconst MasterPassword = props => {\n  const pickColor = str => {\n    if (str.length === 0) {\n      return '#FFFFFF';\n    }\n    const hashCode = str => {\n      let hash = 0;\n      for (var i = 0; i < str.length; i++) {\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\n      }\n      return hash;\n    }\n    return `hsl(${hashCode(str) % 360}, 100%, 80%)`;\n  }\n\n  return (\n    <section className=\"master-password\">\n      <p>\n        <label for=\"master-password\">Master Password</label>\n        <span>\n          <input\n            type=\"checkbox\"\n            id=\"isAutoCopy\"\n            onChange={ props.isAutoCopyHandler }\n            checked={ props.isAutoCopy }\n          />\n          <label\n            for=\"isAutoCopy\"\n            tabIndex=\"2\"\n          >AutoCopy Salted Password</label>\n        </span>\n      </p>\n      <div className=\"input-wrapper\">\n        <input\n          id=\"master-password\"\n          type=\"password\"\n          onChange={ props.masterPasswordHandler }\n          tabIndex=\"1\"\n          autoFocus\n        />\n        <i\n          className=\"master-password-color-indicator\"\n          style={{ backgroundColor: pickColor(props.masterPassword) }}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default MasterPassword;\n","import DomainName from './DomainName';\n\nexport default DomainName;\n","import React from 'react';\nimport './DomainName.scss';\n\nconst DomainName = props => {\n  return (\n    <section className=\"domain-name\">\n      <p>\n        <label for=\"domain-name\">Domain Name</label>\n        <span>\n          <input\n            type=\"checkbox\"\n            id=\"forceLowerCase\"\n            checked={props.forceLowerCase}\n            onChange={props.forceLowerCaseHandler}\n          />\n          <label\n            for=\"forceLowerCase\"\n            tabIndex=\"2\"\n          >Enforce LowerCase</label>\n        </span>  \n      </p>\n      <div className=\"input-wrapper\">\n        <input\n          id=\"domain-name\"\n          type=\"url\"\n          onChange={props.domainNameHandler}\n          tabIndex=\"1\"\n          value={props.domainName}\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default DomainName;\n","import OptionalDomainPhrase from './OptionalDomainPhrase';\n\nexport default OptionalDomainPhrase;\n","import React from 'react';\nimport './OptionalDomainPhrase.scss';\n\nconst OptionalDomainPhrase = props => {\n  return (\n    <section className=\"optional-domain-phrase\">\n      <p>\n        <label for=\"optional-domain-phrase\">Optional Domain Phrase</label>\n      </p>\n      <div className=\"input-wrapper\">\n        <input\n          id=\"optional-domain-phrase\"\n          type=\"url\"\n          onChange={ props.optionalDomainPhraseHandler }\n          tabIndex=\"1\"\n          value={ props.optionalDomainPhrase }\n        />\n      </div>\n    </section>\n  );\n};\n\nexport default OptionalDomainPhrase;\n","import SaltedPassword from './SaltedPassword';\n\nexport default SaltedPassword;\n","import React from 'react';\nimport './SaltedPassword.scss';\n\nconst SaltedPassword = props => {\n  const selectSaltedPassword = () => {\n    const selectable = document.getElementById(\"salted-password\");\n    window.getSelection().selectAllChildren(selectable);\n  }\n  return (\n    <section className=\"salted-password\">\n      <p>\n        <label\n          for=\"salted-password\"\n          onClick={() => selectSaltedPassword()}\n        >Salted Password</label>\n        <span>\n          <label for=\"salted-password-hash-length\">Password Length</label>\n          <input\n            id=\"salted-password-hash-length\"\n            type=\"number\"\n            min=\"1\"\n            max=\"100\"\n            value={props.saltedPasswordLength}\n            tabIndex=\"2\"\n            onChange={props.saltedPasswordLengthHandler}\n          />\n        </span>\n      </p>\n      <div\n        id=\"salted-password\"\n        onClick={() => selectSaltedPassword()}\n      >\n        { props.saltedPassword }\n      </div>\n    </section>\n  );\n};\n\nexport default SaltedPassword;\n","import HashType from './HashType';\n\nexport default HashType;\n","import React from 'react';\nimport './HashType.scss';\n\nconst HashType = props => {\n  return (\n    <div className=\"hash-type\">\n      <select\n        value={props.hashFunctionName}\n        onChange={props.hashTypeHandler}\n        tabIndex=\"2\"\n      >\n        {\n          props.hashFunctionsList.map(hashName => (\n            <option\n              value={ hashName }\n              key={ hashName }\n            >{ hashName.toUpperCase() }</option>\n          ))\n        }\n    </select>\n    </div>\n  );\n};\n\nexport default HashType;\n","import React from 'react';\nimport CryptoES from 'crypto-es';\n \nimport AppHeader from './components/app-header';\nimport AppTitle from './components/app-header/app-title';\nimport MasterPassword from './components/master-password';\nimport DomainName from './components/domain-name';\nimport OptionalDomainPhrase from './components/optional-domain-phrase';\nimport SaltedPassword from './components/salted-password';\nimport HashType from './components/app-header//hash-type';\n\nimport './App.scss';\n\nconst CRYPTO_ALGORITHMS = [\n  { name: 'md5',       f: CryptoES.MD5 },\n  { name: 'sha1',      f: CryptoES.SHA1 },\n  { name: 'sha2',      f: CryptoES.SHA512 },\n  { name: 'sha3',      f: CryptoES.SHA3 },\n  { name: 'ripemd160', f: CryptoES.RIPEMD160 }\n].map(hashFunction => {\n  const hashWrapper = hashFunction =>\n    (message, length) => hashFunction(message)\n      .toString(CryptoES.enc.Base64)\n      // eslint-disable-next-line\n      .replace(/\\=+$/, \"\")\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .slice(0, length);\n  hashFunction.f = hashWrapper(hashFunction.f);\n  return hashFunction;\n});\n\nconst DEFAUT_HASH_FUNCTION = 'sha3';\n\nclass App extends React.Component {\n  state = {\n    masterPassword: '',\n    domainName: '',\n    optionalDomainPhrase: '',\n    hashFunctionName: DEFAUT_HASH_FUNCTION,\n    saltPasswordLength: 20,\n    forceLowerCase: true,\n    isAutoCopy: true\n  };\n\n  generateSaltedPassword = cryptoMethod => {\n    let { masterPassword, domainName, optionalDomainPhrase } = this.state;\n    const { saltPasswordLength, forceLowerCase } = this.state;\n    \n    if (masterPassword.length === 0) {\n      return '';\n    }\n\n    const cryptoAlgorithm = CRYPTO_ALGORITHMS.reduce((accumulator, currentHashFunction) =>\n      (currentHashFunction.name === cryptoMethod ? currentHashFunction.f : accumulator),\n      DEFAUT_HASH_FUNCTION\n    );\n\n    if (!forceLowerCase) {\n      domainName = domainName.toLowerCase();\n      // optionalDomainPhrase = optionalDomainPhrase.toLowerCase();\n    }\n    return cryptoAlgorithm(masterPassword + domainName + optionalDomainPhrase, saltPasswordLength);\n  };\n\n  handleInput = field => event => {\n    const newObject = {};\n    newObject[field] = event.target.value;\n    this.setState(newObject);\n  };\n\n  handleCheckbox = field => event => {\n    const newObject = {};\n    newObject[field] = !this.state[field];\n    this.setState(newObject);\n  };\n\n  render = () => {\n    const {\n      hashFunctionName,\n      saltPasswordLength,\n      forceLowerCase,\n      isAutoCopy,\n      masterPassword,\n      domainName,\n      optionalDomainPhrase\n    } = this.state;\n    const saltedPassword = this.generateSaltedPassword(hashFunctionName);\n\n    if (saltedPassword.length && isAutoCopy) {\n      navigator.clipboard.writeText(saltedPassword);\n    }\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"app\">\n          <AppHeader>\n            <AppTitle title=\"Clue\" />\n            <HashType\n              hashFunctionsList={ CRYPTO_ALGORITHMS.map(hash => hash.name) }\n              hashTypeHandler={ this.handleInput('hashFunctionName') }\n              hashFunctionName={ hashFunctionName }\n            />\n          </AppHeader>\n\n          <MasterPassword\n            masterPassword={ masterPassword }\n            masterPasswordHandler={ this.handleInput('masterPassword') }\n            isAutoCopy={ isAutoCopy }\n            isAutoCopyHandler={ this.handleCheckbox('isAutoCopy') }\n          />\n\n          <DomainName\n            domainName={ domainName }\n            domainNameHandler={ this.handleInput('domainName') }\n            forceLowerCase={ forceLowerCase }\n            forceLowerCaseHandler={ this.handleCheckbox('forceLowerCase') }\n          />\n\n          <OptionalDomainPhrase\n            optionalDomainPhrase={ optionalDomainPhrase }\n            optionalDomainPhraseHandler={ this.handleInput('optionalDomainPhrase') }\n          />\n\n          <SaltedPassword\n            saltedPassword={ saltedPassword }\n            saltedPasswordLength={ saltPasswordLength }\n            saltedPasswordLengthHandler={ this.handleInput('saltPasswordLength') }\n          />\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}